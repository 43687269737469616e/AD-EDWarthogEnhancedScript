//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// STATUS.JSON PARSER //			Determine the Real-time Status of In-game Commands, via the ED Log file.					Original Author: CMDR Clicker	//	->	https://forums.frontier.co.uk/threads/target-scripting-tutorial-read-status-json-process-flags-keyvalue.539783/
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//	->	https://hosting.zaonce.net/community/journal/v31/Journal_Manual_v31.pdf
// TOC:/								initReadStatusJson()		(17)																						//
//-----									initProcessFlagsJson()		(41)																						//
//										initJsonStartCheck()		(211)																						//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// GLOBAL VARIABLES	//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	char myJson;								 							// Char array to store status.json

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// STATUS 'READ/PROCESS' FUNCTIONS	//										Requires:	'StatusFile' alias must be set correctly in AD_EDUserPrefs.tmh
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	int initReadStatusJson() {												// FUNCTION: Read status.json into 'myJson'

		int	fp;																// General purpose file handle
		int	buf = 512;														// Buffer variable. status.json can get lengthy, so assign a buffer of at least 512
		int	myResult;														// General pupose 'result' variable

		Dim(&myJson, buf);													// Dimension our character array to size of buffer
		myJson[0] = 0;														// Set array to zero
		fp = fopen(&StatusFile, "r");										// Open status.json for reading
		if(fp) {															// If we succeed in opening...
			myResult = fread(&myJson, 1, buf, fp);							// ... read the entire file into our character array (myJson)...
			fclose(fp);														// ... and then close the file
			if(myResult == 0) {												// 'myResult' should contain the number of characters read
				ReadErrorCount = ReadErrorCount + 1;
				if(VerboseOutput) printf("WARNING READ ERROR #%d: Status.json\x0a", ReadErrorCount); }
			else {
				ReadErrorCount = 0;
				strdel(&myJson, myResult-1, buf); } }						// If no issues with read, remove any trailing garbage
		else {
			if(VerboseOutput) printf("EXITING Elite Dangerous .. Reason: FATAL ACCESS ERROR in Status.json .. !ABORT!\x0a"); // File not found OR locked by Elite Dangerous!
			Abort(); } }



	int initProcessFlagsJson() {											// FUNCTION: Read & Process "Flags" value from "status.json"

		int Flags = 0;			//? int Flags2 = 0;							// Flags key value integer.
		int EndValue = 0;		//? int EndValue2 = 0;						// Catch when we get to a space or comma
		int myResult;			//? int myResult2;							// Temporary general purpose variable to capture results of file & string operations
		int chrpnt;				//? int chrpnt2;								// Pointer to current character in string

		char thischr;														// Contains current character read during string search
		Dim(&thischr, 2);
		thischr[0] = 0;

		char keyvalue;														// Contains our Key Value when complete
		Dim(&keyvalue, 16);													// Arbitrary size. Currently Flags integer value does not exceed 11 digits
		keyvalue[0] = 0;

		initReadStatusJson();												// Get latest status.json file status
		int Start = 64;														// Flags key value always starts at char# 64 in status.json
																			// Flags key value always ends in a space if zero, else comma character
		chrpnt = 0;															// Reset character pointer

		while(EndValue == 0) {												// Start loop...
			strsub(&thischr, &myJson, Start+chrpnt, Start+chrpnt);			// Grab next character in 'myJson' and put it into 'thischr'
			myResult = strcmp(&thischr, " ");
			if(myResult == 0) EndValue = 1;									// End loop when we find a space
			myResult = strcmp(&thischr, ",");
			if(myResult == 0) EndValue = 1;									// End loop when we find a comma
			if(EndValue == 0) strcat(&keyvalue, &thischr);					// Otherwise, update keyvalue...
			chrpnt = chrpnt + 1; }											// ... update character pointer, and loop
		Flags = ieval(&keyvalue);											// Convert string to integer when we finished the loop
		if(DebugOutput) printf("Flags Integer    =    %d\x0a", Flags);		// Print the Flags integer value to the console
																			// TARGET uses 32 bit signed precision for its integers. Flags values larger than 2147483648 wrap around to negative number and means that bit 31 (fSRVHiBeam) is set.
//		Flags2 = ieval(&keyvalue);


// READ FLAG 2 //
// How do I read in both flags? //




		if(Flags == 0 & GameLoaded == 1) {									// Detects when Game halts	  (If Flags == 0, it means the game has not started yet...)
			GameLoaded = 0;
			if(TurnOffLEDSOnExit) ActKey(KEYON+PULSE+EXEC("initLEDShutdown();")); // SHUTDOWN LED BACKLIGHT DIMMING SEQUENCE
			if(VerboseOutput & ReadErrorCount > 4) printf("EXITING Elite Dangerous .. Reason: FILE READ ERROR.. Count Exceeded...\x0a");
			if(VerboseOutput & ReadErrorCount < 4) printf("EXITING Elite Dangerous .. Reason: Auto Script Shutdown Initiated .. Bye!");
			if(AbortScriptOnExit) Abort(); }								// EXIT: Force Stop of Script.

		if(Flags != 0) {													// Detects when Game is active (If Flags != 0, it means the game has started & reading status.json file successful...)

//			Flags2 = stfnGetKeyValue("Flags2", INTEGER);
//			if (Flags2 != -1) {
//				Odyssey = 1;					// Flags2 presence means we're running Odyssey
//			}
//			else {
//				Odyssey = 0;
//			}



			if(GameLoaded == 0) GameLoaded = 1;								// Set Flag to represent game has started for the first time (as opposed to re-started).			
			if(Flags < 0)		fSRVHiBeam = 1;								// ... otherwise, test for bit 31 first, like so...
			else 				fSRVHiBeam = 0;

			fAltFromAvgRad		= ((Flags & ED_AltFromAvgRad) > 0);			// ... then assign the rest of the 'Flags' values using 'bitwise and' between Flags and a mask for each variable, like so...
			fCargoScoop			= ((Flags & ED_CargoScoopDeployed) > 0);
			fDanger				= ((Flags & ED_IsInDanger) > 0);
			fDocked				= ((Flags & ED_Docked) > 0);
			fFAOff				= ((Flags & ED_FlightAssistOff) > 0);
			fFighter			= ((Flags & ED_InFighter) > 0);
			fFSDCharging		= ((Flags & ED_FSDCharging) > 0);
			fFSDCooldown		= ((Flags & ED_FSDCooldown) > 0);
			fFuelScoop			= ((Flags & ED_ScoopingFuel) > 0);
			fHardpoints			= ((Flags & ED_HardpointsDeployed) > 0);
			fHUDAnalysis		= ((Flags & ED_HudInAnalysisMode) > 0);
			fInterdicted		= ((Flags & ED_BeingInterdicted) > 0);
			fInWing				= ((Flags & ED_InWing) > 0);
			fLanded				= ((Flags & ED_Landed) > 0);
			fLandingGear		= ((Flags & ED_LandingGearDown) > 0);
			fLatLong			= ((Flags & ED_HasLatLong) > 0);
			fLights				= ((Flags & ED_LightsOn) > 0);
			fLowFuel			= ((Flags & ED_LowFuel) > 0);
			fMainShip			= ((Flags & ED_InMainShip) > 0);
			fMassLocked			= ((Flags & ED_FSDMassLocked) > 0);
			fNightVision		= ((Flags & ED_NightVision) > 0);
			fOverHeating		= ((Flags & ED_OverHeating) > 0);
			fsdJump				= ((Flags & ED_FSDJump) > 0);	
			fSilentRunning		= ((Flags & ED_SilentRunning) > 0);
			fShieldsUp			= ((Flags & ED_ShieldsUp) > 0);
			fSRV				= ((Flags & ED_InSRV) > 0);
			fSRVDriveAssist		= ((Flags & ED_SRVDriveAssist) > 0);
			fSRVHandbrake		= ((Flags & ED_SRVHandbrake) > 0);
			fSRVTurretRetracted = ((Flags & ED_SRVTurretRetracted) > 0);
			fSRVTurretView		= ((Flags & ED_SRVTurret) > 0);
			fSupercruise		= ((Flags & ED_Supercruise) > 0);
			
			//if(Flags2 != 0) {
//			fOnFoot					= ((Flags2 & ED_OnFoot) > 0);					// 'ED_...' masks defined within 'ED_ScriptDefines' file 
//			fInTaxi					= ((Flags2 & ED_InTaxi) > 0);
//			fInMultiCrew			= ((Flags2 & ED_InMultiCrew) > 0);
//			fOnFootInStation		= ((Flags2 & ED_OnFootInStation) > 0);
//			fOnFootOnPlanet			= ((Flags2 & ED_OnFootOnPlanet) > 0);
//			fAimDownSight			= ((Flags2 & ED_AimDownSight) > 0);
//			fLowOxygen				= ((Flags2 & ED_LowOxygen) > 0);
//			fLowHealth				= ((Flags2 & ED_LowHealth) > 0);
//			fCold					= ((Flags2 & ED_Cold) > 0);
//			fHot					= ((Flags2 & ED_Hot) > 0);
//			fVeryCold				= ((Flags2 & ED_VeryCold) > 0);
//			fVeryHot				= ((Flags2 & ED_VeryHot) > 0);
//			fGlideMode				= ((Flags2 & ED_GlideMode) > 0);
//			fOnFootInHanger			= ((Flags2 & ED_OnFootInHanger) > 0);
//			fOnFootSocialSpace		= ((Flags2 & ED_OnFootSocialSpace) > 0);
//			fOnFootExterior			= ((Flags2 & ED_OnFootExterior) > 0);
//			fBreathableAtmosphere	= ((Flags2 & ED_BreathableAtmosphere) > 0);
			
			
			
			
			
			
																			// Check Panel LEDs are in the right state on each file read (Note: Rotational Correction has no flag to check so LEDs controlled by Function)
			if(fFAOff) 			{ if(FALED)	 {	ActKey(KEYON+PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1)); FALED = 0; } } //FAOff	// set LED 1 OFF
			else				{ if(!FALED) {	if(BlingLEDBling) initLEDController(LED1); FALED = 1;  			 //FAOn
												ActKey(KEYON+PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1)); } }		// set LED 1 ON
			if(!fSilentRunning) { if(!SRLED) {	ActKey(KEYON+PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3)); SRLED = 1; } } //SROff	// set LED 3 OFF
			else				{ if(SRLED)	 {	if(BlingLEDBling) initLEDController(LED3); SRLED = 0;			 //SROn
												ActKey(KEYON+PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3)); } }		// set LED 3 ON
			if(!fCargoScoop)	{ if(!CSLED) {	ActKey(KEYON+PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4)); CSLED = 1; } } //CSOff	// set LED 4 OFF
			else				{ if(CSLED)	 {	if(BlingLEDBling) initLEDController(LED4); CSLED = 0;			 //CSOn
												ActKey(KEYON+PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4)); } }		// set LED 4 ON
			if(!fLandingGear)	{ if(!LGLED) {	ActKey(KEYON+PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5)); LGLED = 1; } } //LGOff	// set LED 5 OFF
			else				{ if(LGLED)	 {	if(BlingLEDBling) initLEDController(LED5); LGLED = 0;			 //LGOn
												ActKey(KEYON+PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)); } }		// set LED 5 ON

			if(fsdJump & !fLatLong & FSDJumpCheck == 0) {					// Turn Off Ship HUD when in Witchspace (Frameshift Warp Tunnel)
				ActKey(KEYON+PULSE+HideShipGUI);
				FSDJumpCheck = 1; }
			if(!fsdJump & !fLatLong & FSDJumpCheck == 1) {
				ActKey(KEYON+PULSE+HideShipGUI);
				FSDJumpCheck = 0; }

			if(ShipSRVTelemetry & !StartupLock) {							// Outputs Ship & SRV Telemetry data sourced from the status.json file to the TARGET Window.
				if(fDanger & StatusDanger)							{ printf("*!! DANGER !!*\x0a");						StatusDanger = 1;		DeferCall(5000,  &ActKey, KEYON+PULSE+EXEC("StatusDanger = 0;")); }
				if(fDocked & StatusDocked == 0)						{ printf("Ship Status: Docked on Landing Pad\x0a"); StatusDocked = 1; }
				if(!fDocked & !fSRV & StatusDocked == 1)			{ printf("Ship Status: TAKEOFF!\x0a");				StatusDocked = 0; }
				if(fFighter & StatusFighter == 0)					{ printf("Aboard Your Figher\x0a");					StatusMainShip = 0; StatusSRV = 0; StatusFighter = 1; }
				if(fFSDCooldown & StatusFSDCooldown == 0)			{ printf("FSD Cooldown: IN-PROGRESS\x0a");			StatusFSDCooldown = 1; }
				if(!fFSDCooldown & StatusFSDCooldown == 1)			{ printf("FSD Cooldown: COMPLETE\x0a");				StatusFSDCooldown = 0; }
				if(fFSDCharging & StatusFSDCharging == 0)			{ printf("FSD Charging: IN-PROGRESS\x0a");			StatusFSDCharging = 1; }
				if(!fFSDCharging & StatusFSDCharging == 1)			{ printf("FSD Charging: COMPLETE\x0a");				StatusFSDCharging = 0; }
				if(fFuelScoop & StatusFuelScoop == 0)				{ printf("Ship Status: FUEL SCOOP ENGAGED\x0a");	StatusFuelScoop = 1; }
				if(!fFuelScoop & StatusFuelScoop == 1)				{ printf("Ship Status: FUEL SCOOP RETRACTED\x0a");	StatusFuelScoop = 0; }
				if(fHUDAnalysis & StatusHUD == 0)					{ printf("HUD Analysis Mode: ENABLED\x0a");			StatusHUD = 1; }
				if(!fHUDAnalysis & StatusHUD == 1)					{ printf("HUD Analysis Mode: DISABED\x0a");			StatusHUD = 0; }
				if(fInterdicted & StatusInterdicted == 0)			{ printf("-!! INTERDICTION ATTEMPT !!-\x0a");		StatusInterdicted = 1;	DeferCall(5000,  &ActKey, KEYON+PULSE+EXEC("StatusInterdicted = 0;")); }
				if(fInWing & StatusInWing == 0)						{ printf("Ship Status: Joined WING\x0a");			StatusInWing = 1; }
				if(!fInWing & StatusInWing == 1)	 				{ printf("Ship Status: Left WING\x0a");				StatusInWing = 0; }
				if(fLanded & StatusLanded == 0)						{ printf("Ship Status: Landed on Planet\x0a");		StatusLanded = 1; }
				if(!fLanded & !fSRV & StatusLanded == 1)			{ printf("Ship Status: TAKEOFF!\x0a");				StatusLanded = 0; }
				if(fLatLong & !fSRV & !fLanded & StatusLatLong == 0){ printf("Ship Status: Orbiting Planet\x0a");		StatusLatLong = 1; }
				if(!fLatLong & !fLanded & StatusLatLong == 1)		{ printf("Ship Status: Left Orbit\x0a");			StatusLatLong = 0; }
				if(fLowFuel & StatusLowFuel == 0)					{ printf("WARNING: Running Low on Fuel!\x0a");		StatusLowFuel = 1;		DeferCall(30000, &ActKey, KEYON+PULSE+EXEC("StatusLowFuel = 0;")); }
				if(fMainShip & StatusMainShip == 0)					{ printf("Aboard Your Ship\x0a");					StatusMainShip = 1; StatusSRV = 0; StatusFighter = 0; }
				if(fMassLocked & StatusMassLocked == 0)				{ printf("WARNING: Mass Locked\x0a");				StatusMassLocked = 1; 	DeferCall(20000,  &ActKey, KEYON+PULSE+EXEC("StatusMassLocked = 0;")); }
				if(!fMassLocked & !fSRV & StatusMassLocked == 1)	{ printf("No Longer Mass Locked\x0a");				StatusMassLocked = 0; }
				if(fOverHeating & StatusOverheating == 0)			{ printf("^!! OVERHEATING !!^\x0a");				StatusOverheating = 1;	DeferCall(5000,  &ActKey, KEYON+PULSE+EXEC("StatusOverheating = 0;")); }
				if(fsdJump & !fLatLong & StatusfsdJump == 0)		{ printf("Frame Shift Drive Engaged\x0a");			StatusfsdJump = 1; }
				if(!fsdJump & !fLatLong & StatusfsdJump == 1)		{ printf("Leaving Witchspace...\x0a");				StatusfsdJump = 0; }
				if(fShieldsUp & StatusShieldsUp == 0)				{ printf("Ship Shields: ONLINE\x0a");				StatusShieldsUp = 1; }
				if(!fShieldsUp & StatusShieldsUp == 1)				{ printf("Ship Shields: OFFLINE!\x0a");				StatusShieldsUp = 0; }
				if(fSRV & StatusSRV == 0)							{ printf("Aboard Your SRV\x0a");					StatusMainShip = 0; StatusSRV = 1; StatusFighter = 0; }
				if(fSRVDriveAssist & fSRV & StatusSRVAssist == 0)	{ printf("SRV: DRIVE ASSIST ON\x0a");				StatusSRVAssist = 1; }
				if(!fSRVDriveAssist & fSRV & StatusSRVAssist == 1)	{ printf("SRV: DRIVE ASSIST OFF\x0a");				StatusSRVAssist = 0; }
				if(fSRVHandbrake & fSRV & StatusSRVHandbrake == 0) 	{ printf("SRV: HANDBRAKE ON\x0a");					StatusSRVHandbrake = 1; }
				if(!fSRVHandbrake & fSRV & StatusSRVHandbrake == 1)	{ printf("SRV: HANDBRAKE OFF\x0a");					StatusSRVHandbrake = 0; }
				if(fSRVTurretRetracted & fSRV & StatusSRVTRet == 0)	{ printf("SRV: TURRET RETRACTED\x0a");				StatusSRVTRet = 1; }
				if(!fSRVTurretRetracted & fSRV & StatusSRVTRet == 1){ printf("SRV: TURRET EXTENDED\x0a");				StatusSRVTRet = 0; }
				if(fSRVTurretView & fSRV & StatusSRVTView == 0)		{ printf("SRV: TURRET VIEW ENABLED\x0a");			StatusSRVTView = 1; }
				if(!fSRVTurretView & fSRV & StatusSRVTView == 1)	{ printf("SRV: TURRET VIEW DISABLED\x0a");			StatusSRVTView = 0; }
				if(fSupercruise & StatusSupercruise == 0)			{ printf("Ship Flight: SUPERCRUISE ON\x0a");		StatusSupercruise = 1; }
				if(!fSupercruise & StatusSupercruise == 1)			{ printf("Ship Flight: SUPERCRUISE OFF\x0a");		StatusSupercruise = 0; } }

			if(DebugOutput) {
				printf("\x0a\ Active Flags");								// Print any Flags which are set to 1
				printf("\x0a===============\x0a");
				if(fAltFromAvgRad)		printf("Radius-ALT\x0a");					if(fLights)					printf("Lights ON\x0a");
				if(fCargoScoop)			printf("Cargo Scoop Deployed\x0a");			if(fLowFuel)				printf("Low Fuel\x0a");
				if(fDanger)				printf("!! DANGER !!\x0a");					if(fMainShip)				printf("In MainShip\x0a");
				if(fDocked)				printf("Docked on Landing Pad\x0a");		if(fMassLocked)				printf("FSD Masslocked\x0a");
				if(fFAOff)				printf("FlightAssist OFF\x0a");				if(fNightVision)			printf("NightVision\x0a");
				if(fFighter)			printf("In Fighter\x0a");					if(fOverHeating)			printf("Over Heating\x0a");
				if(fFSDCharging)		printf("FSD Charging\x0a");					if(fsdJump)					printf("Hyperjump Engaged\x0a");
				if(fFSDCooldown)		printf("FSD Cooldown\x0a");					if(fSilentRunning)			printf("Silent Running\x0a");
				if(fFuelScoop)			printf("Fuel Scoop Deployed\x0a");			if(fShieldsUp)				printf("Shields UP\x0a");
				if(fHardpoints)			printf("Hardpoints Deployed\x0a");			if(fSRV)					printf("In SRV\x0a");
				if(fHUDAnalysis)		printf("HUD Analysis\x0a");					if(fSRVDriveAssist)			printf("SRV Drive Assist\x0a");
				if(fInterdicted)		printf("Being Interdicted!!\x0a");			if(fSRVHandbrake)			printf("SRV Handbrake\x0a");
				if(fInWing)				printf("In Wing\x0a");						if(fSRVHiBeam)				printf("SRV HiBeam\x0a");
				if(fLanded)				printf("Landed on Planet\x0a");				if(fSRVTurretRetracted)		printf("SRV Turret Retracted\x0a");
				if(fLandingGear)		printf("Landing Gear Deployed\x0a");		if(fSRVTurretView)			printf("SRV Turret View\x0a");
				if(fLatLong)			printf("Lat\\Lon\x0a");						if(fSupercruise)			printf("Supercruise Engaged\x0a");
				
				
//				printf("Bits set in FLAGS2:\X0A");
//				if (fOnFoot)	 			printf("On Foot\x0a");
//				if (fInTaxi) 				printf("In Taxi\x0a");
//				if (fInMultiCrew) 			printf("In Multi Crew\x0a");
//				if (fOnFootInStation) 		printf("On Foot In Station\x0a");
//				if (fOnFootOnPlanet) 		printf("On Foot On Planet\x0a");
//				if (fAimDownSight) 			printf("Aim Down Sight\x0a");
//				if (fLowOxygen) 			printf("Low Oxygen\x0a");
//				if (fLowHealth) 			printf("Low Health\x0a");
//				if (fCold) 					printf("Cold\x0a");
//				if (fHot) 					printf("Hot\x0a");
//				if (fVeryCold) 				printf("Very Cold\x0a");
//				if (fVeryHot) 				printf("Very Hot\x0a");
//				if (fGlideMode)				printf("Glide Mode\x0a");
//				if (fOnFootInHanger)		printf("On Foot In Hanger\x0a");
//				if (fOnFootSocialSpace)		printf("On Foot in Social Space\x0a");
//				if (fOnFootExterior)		printf("On Foot Exterior\x0a");
//				if (fBreathableAtmosphere)	printf("Breathable Atmosphere\x0a");

				printf("===============\x0a"); } } }


//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// STATUS START-UP & LOOP FUNCTION	//										Requires:	'StatusFile' alias must be set correctly in AD_EDUserPrefs.tmh
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	int initJsonStartCheck() {												// FUNCTION: Initial check to see if game is already running after we've restarted the script.
		int fp;																//  file pointer (handle)
		int ValidStatusFile = 0;
		
		fp = fopen(&StatusFile, "r");
		
		if(fp) {
			fclose(fp);
			ValidStatusFile = 1;
			if(DebugOutput) { printf("\FILE LOAD SUCCESS: Status.json file set correctly in AD_EDUserPrefs\x0a"); } }
		else {
			printf("\x0a\!! FATAL ERROR !!\x0a");
			printf("EXITING Elite Dangerous .. Reason: Status.json file *Not Found*\x0a");
			printf("Please set 'StatusFile' alias correctly in User Preferences\x0a");
			printf("Refer to AD_EDUserPrefs.tmh file for instructions. Closing Down Script...");
			Abort(); }
		if(ValidStatusFile) {
			initReadStatusJson();
			if(VerboseOutput) printf("Processing Status.json flags...now running...Done\x0a");
			ActKey(KEYON+REXEC(3, StatusReadRate, "initProcessFlagsJson();", RNOSTOP)); } }		// StatusReadRate is set in AD_EDDefaults.tmh. Stops on read failure, else loops while game running.


//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
