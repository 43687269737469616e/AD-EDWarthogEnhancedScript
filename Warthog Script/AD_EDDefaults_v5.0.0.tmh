//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// GLOBAL VARIABLES //										** YOU SHOULD NOT NEED TO CHANGE THE DEFAULTS STORED IN THIS FILE **
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	define ADVersionMajor 		5						// Script Version Major Value			ie. 3.x.x
	define ADVersionMinor 		0						// Script Version Minor Value			ie. x.4.x
	define ADVersionPoint		0						// Script Version Point Update			ie. x.x.5

	define SYS					1						// Used in initPIPMapper() for managing System  PIPs (see AD_EDFunctions_v5.x.x.tmh) (DO NOT MODIFY!)
	define ENG					2						// Used in initPIPMapper() for managing Engine  PIPs (see AD_EDFunctions_v5.x.x.tmh) (DO NOT MODIFY!)
	define WEP					3						// Used in initPIPMapper() for managing Weapon  PIPs (see AD_EDFunctions_v5.x.x.tmh) (DO NOT MODIFY!)
	define MID					4						// Used in initPIPMapper() for managing Balance PIPs (see AD_EDFunctions_v5.x.x.tmh) (DO NOT MODIFY!)

	int    profile =			1					   ;// Set initial joystick profile global variable for joystick curves	(Options: 0, 1, 2)	(default = 1)
	char   ca_pulseChar[] =	   "0"					   ;// Used in Auto-Text Chat Presets		(DO NOT modify!)

	define FLOAT				0						// Used in initGetKeyValue()
	define INTEGER				1						// Used in initGetKeyValue()
	define STRING				2						// Used in initGetKeyValue()
	define NUL					0						// Used in initGetKeyValue()


//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// DEFAULT TIMINGS //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	define PulseTime 			25						// PULSE+ Delay time 			(ms)									(default = 25ms)
	define DelayTime 			75						// D() Delay time 				(ms)									(default = 75ms)

	define MiniPressDelay		110						// Shortest Delay 				(ms)									(default = 110ms)
	define ShortPressDelay 		250						// Shorter Delay 				(ms)									(default = 250ms)
	define PIPPressDelay 		333						// Timing for PIPs				(ms)									(default = 333ms)
	define DTPressDelay			365						// Timing for Pinky Double Tap	(ms)									(default = 365ms)
	define LongPressDelay 		500						// Standard Delay 				(ms)									(default = 500ms)
	define ExtraPressDelay 		1500					// Longest Delay (Safety Press) (ms)									(default = 1500ms)

	define ScanTimer			6000					// Set the Delay Timer for Explorer Scanner to auto-disengage			(default = 6000ms)	[Note: Should only need to change this if you use Engineered Fast Scanners or Using Wake Scanners which need up to 9000ms]
	define MineTimer			6200					// Set the Delay Timer for Mining Pulse Wave Scanner to auto-disengage	(default = 6200ms)

	define ChatKeyRepeatTime	70						// Auto-Text Chat Preset time	(ms)									(default = 70ms)
	define StatusReadRate		500						// Looping rate of the initProcessFlags() function to read latest status.json status updates. (default = 500ms)


//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// DEFAULT STATES    		(1 = Yes, 0 = No) //		// VARIABLE DESCRIPTION & USAGE
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
														//  NOTE: If your switches aren't set to match, then you may need to use the toggle to realign toggle position.

	int AxisCurveMod;									// Initiates variable to be used for custom axis curve preset on Throttle.		(used in initSetThrottleCurves())
	int StartupLock			  = 1;						// Script Loading Function Lock (During Boot of Script this flag will prevent some code from triggering keystrokes) (used in AD_ED_v5.x.x.tmc)
	int GameLoaded			  = 0;						// Flag is set when game starts to send output from status.json file confirming the game is loaded and you are in a session. Used in auto-shutdown functionality. (used in AD_EDStatus.json.tmh)
	int ReadErrorCount		  = 0;						// Tracks the number of times in a row the script fails to read the status.json file. Script will abort on 3 failures in a row. (used in AD_EDStatus.json.tmh)
	int CameraMode			  = 1;						// Tracks External Camera mode							(used in initExternalCameraUpgrade())	
	int RCorrection 		  = 1;						// Rotational Correction ON		(Press 'F4' to align as required in-game) 		(used in initToggleRotationCorrection())
	int Lights 				  = 0;						// Ship Lights OFF				(Press 'INSERT' to align if SRV takes out of alignment) (used in initToggleShipLights())
	int AltFlightToggle		  = 0;						// Tracks Alternative Flight Controls Toggle Status OFF	(used in initEnhancedFAOFF())
	int AltFlightHold		  = 0;						// Tracks Alternative Flight Controls Hold Status OFF	(used in initEnhancedFAOFF())
	int APSeqLong			  = 0;						// Tracks Long Press for Autopilot Engage Button		(used in initAPEngageEnhancer())
	int APSeqShort			  = 0;						// Tracks Short Press for Autopilot Engage Button		(used in initAPEngageEnhancer())
	int MicCheckHold		  = 0;						// Tracks if Microphone PTT Hold is engaged				(used in initMicCommander())
	int MicCheckToggle		  = 0;						// Tracks if Microphone Toggle is engaged 				(used in initMicCommander())
	int MicExtPulseCheck	  = 0;						// Tracks state of PTT Microphone Pulse action			(used in initMicCommander())
	int MicExtHoldCheck		  = 0;						// Tracks state of PTT Microphone Down/Up action		(used in initMicCommander())
	int MicExtPulseCheckALT	  = 0;						// Tracks state of Alt. PTT Microphone Pulse action		(used in initMicCommander())
	int MicExtHoldCheckALT	  = 0;						// Tracks state of Alt. PTT Microphone Down/Up action	(used in initMicCommander())
	int MicExtToggleCheck	  = 0;						// Tracks state of Toggle Microphone action				(used in initMicCommander())
	int MicExtToggleCheckALT  = 0;						// Tracks state of Alt. Toggle Microphone action		(used in initMicCommander())
	int MicExtToggleCombo	  = 0;						// Tracks state of Toggle Microphone Combo action		(used in initMicCommander())
	int CoolRunnings 		  = 0;						// Tracks state of Silent Running + Heat Sink Combo		(used in initToggleSilentRunning())
	int SRStrobe			  = 0;						// Tracks state of Silent Running Strobe				(used in initToggleSilentRunning())
	int DoubleTapPT			  = 0;						// Tracks state of Double Tap function on Pinky Trigger (used in initUserHotSlotPinkyTrigger())
	int ReportCrimeState	  = 0;						// Tracks state of Report Crimes Against Me Toggle		(used in AD_ED_v5.x.x.tmc)
	int ShowGameStatState	  = 0;						// Tracks state of OSD FPS/Bandwidth Monitor Toggle		(used in AD_ED_v5.x.x.tmc)
	int EndlessStatePri		  = 0;						// Tracks state of Repeater Fire Combat-Endless Mode Pri(used in AD_ED_v5.x.x.tmc)
	int EndlessStateSec		  = 0;						// Tracks state of Repeater Fire Combat-Endless Mode Sec(used in AD_ED_v5.x.x.tmc)
	int FSDJumpCheck		  = 0;						// Tracks state of FSD Jump Travel in Witchspace		(used in AD_EDStatusJson.tmh)
	int StatusMainShip		  = 0;						// Tracks state when in Main Ship						(used in AD_EDStatusJson.tmh)
	int StatusDanger		  = 0;						// Tracks state when in Danger!							(used in AD_EDStatusJson.tmh)
	int StatusDocked		  = 0;						// Tracks state when Docked	on a Landing Pad			(used in AD_EDStatusJson.tmh)
	int StatusFighter		  = 0;						// Tracks state when in Fighter 						(used in AD_EDStatusJson.tmh)
	int StatusFSDCooldown	  = 0;						// Tracks state when in FSD Cooldown					(used in AD_EDStatusJson.tmh)
	int StatusFSDCharging	  = 0;						// Tracks state when FSD Charging						(used in AD_EDStatusJson.tmh)
	int StatusFuelScoop		  = 0;						// Tracks state of Fuel Scooping						(used in AD_EDStatusJson.tmh)
	int StatusHUD			  = 0;						// Tracks state when in HUD Analysis mode				(used in AD_EDStatusJson.tmh)
	int StatusInterdicted	  = 0;						// Tracks state when being Interdicted!					(used in AD_EDStatusJson.tmh)
	int StatusInWing		  = 0;						// Tracks state when in a Wing 							(used in AD_EDStatusJson.tmh)
	int StatusLanded		  = 0;						// Tracks state when Landed on a Planet					(used in AD_EDStatusJson.tmh)
	int StatusLatLong		  = 0;						// Tracks state when in Orbit of a Planet				(used in AD_EDStatusJson.tmh)
	int StatusLowFuel		  = 0;						// Tracks state when Low in Fuel						(used in AD_EDStatusJson.tmh)
	int StatusMassLocked	  = 0;						// Tracks state when Mass Locked by Body or Ship		(used in AD_EDStatusJson.tmh)
	int StatusOverheating	  = 0;						// Tracks state when ship is Overheating!				(used in AD_EDStatusJson.tmh)
	int StatusfsdJump		  = 0;						// Tracks state when you are in Witchspace				(used in AD_EDStatusJson.tmh)
	int StatusShieldsUp		  = 0;						// Tracks state when Shields are Up						(used in AD_EDStatusJson.tmh)
	int StatusSupercruise	  = 0;						// Tracks state when in Supercruise						(used in AD_EDStatusJson.tmh)
	int StatusSRV			  = 0;						// Tracks state when in SRV								(used in AD_EDStatusJson.tmh)
	int StatusSRVAssist		  = 0;						// Tracks state when SRV Drive Assist active			(used in AD_EDStatusJson.tmh)
	int StatusSRVHandbrake	  = 0;						// Tracks state of SRV Handbrake						(used in AD_EDStatusJson.tmh)
	int StatusSRVTRet		  = 0;						// Tracks state of SRV Turret Retracting				(used in AD_EDStatusJson.tmh)
	int StatusSRVTView		  = 0;						// Tracks state of SRV Turret View						(used in AD_EDStatusJson.tmh)
	int PTModifier			  = 0;						// Tracks state of modifier for Pinky Trigger on Joy	(used in AD_ED_v5.x.x.tmc)
	int FreeModeHat			  = 0;						// Tracks state of Free Mode Camera activation			(used in initFreeCameraModeUpgrade())
	int FALED				  = 1;						// Tracks state of Flight Assist Off LED				(used in initProcessFlagsJson())
	int SRLED				  = 0;						// Tracks state of Silent Running LED					(used in initProcessFlagsJson())
	int CSLED				  = 0;						// Tracks state of Cargo Scoop LED						(used in initProcessFlagsJson())
	int LGLED				  = 0;						// Tracks state of Landing Gear LED						(used in initProcessFlagsJson())
	int Odyssey				  = 0;						// Tracks Game Version	(0 = Horizons, 1 = Odyssey) 	(We check this when game starts running via presence of 'Flags2' Key in status.json)


//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// FLAG VARIABLES   //	(Used in AD_EDStatusJson.tmh)	   Refer to Section 13 (page 80) in latest Player Journal Docs for more info -> https://hosting.zaonce.net/community/journal/v31/Journal_Manual_v31.pdf
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
														// Use these after calling initProcessFlags()
	int Flags 				  =	0;						// contains the Flags key value integer
	int Flags2				  =	0;						// contains the Flags2 key value integer 
	int OldFlags			  =	0;						// track when Flags key value changes
	int OldFlags2			  =	0;						// track when Flags2 key value changes 
	int fAltFromAvgRad		  = 0;						// Altitude from Average radius 				
	int fCargoScoop			  = 0;
	int fDanger				  = 0;						// Is In Danger
	int fDocked				  = 0;						// On a Landing Pad
	int fFAOff				  = 0;						// Flight Assist Off
	int fFighter			  = 0;						// In Fighter
	int fFSDCharging		  = 0;						// FSD Charging Timer in Progress
	int fFSDCooldown		  = 0;						// FSD Cooldown Timer in Progress
	int fFuelScoop			  = 0;						// Fuel Scoop Active
	int fHardpoints			  = 0;
	int fHUDAnalysis		  = 0;						// HUD tracking, Combat Mode is Off (0), Analysis Mode is On (1)
	int fInterdicted		  = 0;						// Interdiction Attempt in Progress
	int fInWing				  = 0;						// Member of a Wing
	int fLanded				  = 0;						// On a Planet
	int fLandingGear		  = 0;
	int fLatLong			  = 0;						// Orbiting a Planet
	int fLights				  = 0;
	int fLowFuel			  = 0;						// Under 15% Fuel Left
	int fMainShip			  = 0;						// In Ship
	int fMassLocked			  = 0;						// Mass Locked by a Planet, Station or Ship
	int fNightVision		  = 0;
	int fOverHeating		  = 0;						// Overheating enabled on 100%
	int fsdJump				  = 0;						// In Witchspace
	int fSilentRunning		  = 0;
	int fShieldsUp			  = 0;						// Shields are back online
	int fSRV				  = 0;						// In SRV
	int fSRVDriveAssist		  = 0;
	int fSRVHandbrake		  = 0;
	int fSRVHiBeam			  = 0;
	int fSRVTurretRetracted	  = 0;						// SRV Turret retracted (close to ship) 
	int fSRVTurretView		  = 0;
	int fSupercruise		  = 0;						// Ship in Supercruise
	int fOnFoot				  =	0;						// Disembarked on Foot
	int fInTaxi				  =	0;						// Travelling in a Taxi Ship
	int fInMultiCrew		  =	0;	      				// Multi-Crew Mode Active
	int fOnFootInStation      =	0;
	int fOnFootOnPlanet       =	0;
	int fAimDownSight      	  =	0;
	int fLowOxygen			  =	0;
	int fLowHealth            =	0;
	int fCold	              =	0;
	int fHot				  =	0;
	int fVeryCold	          =	0;
	int fVeryHot	          =	0;
	int fGlideMode			  = 0;
	int fOnFootInHanger		  = 0;
	int fOnFootSocialSpace	  = 0;
	int fOnFootExterior		  = 0;
	int fBreathableAtmosphere = 0;


//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// FLAGS VALUE MASKS //		(Used in AD_EDStatusJson.tmh)		(Updated to Journal v31) 			  // See around page 80 in the Player Journal documentation.
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

	define ED_Docked				0x0000000000000001	// Flags1 (Horizon)
	define ED_Landed				0x0000000000000002
	define ED_LandingGearDown		0x0000000000000004
	define ED_ShieldsUp				0x0000000000000008

	define ED_Supercruise			0x0000000000000010
	define ED_FlightAssistOff		0x0000000000000020
	define ED_HardpointsDeployed	0x0000000000000040
	define ED_InWing				0x0000000000000080

	define ED_LightsOn				0x0000000000000100
	define ED_CargoScoopDeployed	0x0000000000000200
	define ED_SilentRunning	 		0x0000000000000400
	define ED_ScoopingFuel			0x0000000000000800

	define ED_SRVHandbrake			0x0000000000001000
	define ED_SRVTurret				0x0000000000002000
	define ED_SRVTurretRetracted	0x0000000000004000
	define ED_SRVDriveAssist		0x0000000000008000

	define ED_FSDMassLocked			0x0000000000010000
	define ED_FSDCharging			0x0000000000020000
	define ED_FSDCooldown			0x0000000000040000
	define ED_LowFuel				0x0000000000080000

	define ED_OverHeating			0x0000000000100000
	define ED_HasLatLong			0x0000000000200000
	define ED_IsInDanger			0x0000000000400000
	define ED_BeingInterdicted		0x0000000000800000

	define ED_InMainShip			0x0000000001000000
	define ED_InFighter				0x0000000002000000
	define ED_InSRV					0x0000000004000000
	define ED_HudInAnalysisMode		0x0000000008000000

	define ED_NightVision		 	0x0000000010000000
	define ED_AltFromAvgRad	  		0x0000000020000000
	define ED_FSDJump				0x0000000040000000
	define ED_SRVHiBeam				0x0000000080000000

	define ED_OnFoot               	0x0000000000000001	// Flags2 (Odyssey)
	define ED_InTaxi               	0x0000000000000002
	define ED_InMultiCrew	      	0x0000000000000004
	define ED_OnFootInStation      	0x0000000000000008

	define ED_OnFootOnPlanet       	0x0000000000000010
	define ED_AimDownSight      	0x0000000000000020
	define ED_LowOxygen			   	0x0000000000000040
	define ED_LowHealth            	0x0000000000000080

	define ED_Cold	             	0x0000000000000100
	define ED_Hot				   	0x0000000000000200
	define ED_VeryCold	        	0x0000000000000400
	define ED_VeryHot	         	0x0000000000000800

	define ED_GlideMode	         	0x0000000000001000
	define ED_OnFootInHanger       	0x0000000000002000
	define ED_OnFootSocialSpace	 	0x0000000000004000
	define ED_OnFootExterior     	0x0000000000008000

	define ED_BreathableAtmosphere 	0x0000000000010000


//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
